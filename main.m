%==========================================================================
%   Optimization Project
%   Point Pattern Matching
%--------------------------------------------------------------------------
% Description: This code implements the paper: "Point Pattern Matching"
% Instructor:  Michael Poghosyan
% Group Members: Naira Matosyan, Sona Ghevondyan, Silva Arakelyan
%--------------------------------------------------------------------------
%   input: Matrix containing the pattern of character which best match
%           we want to find
%       
%
%   output: The best matching characters name and table showing
%   dissimillarities between testing letter and every letter from stored
%   dataset
%--------------------------------------------------------------------------
%
%==========================================================================


% Testing dataset, that is matrices containing the coordinates of 
% different letters, they are modified( shifted, scaled, rotated, etc) versions
% of the letters from stored dataset
M_scaled = [1	1	1	1	1	1	1	1	1	1	1	1	2	3	4	5	6	8	10	11	12	14	15	16	16	16	16	16	16	16	16	16	16	16	16	17	18	20	22	24	26	27	27	28	29	29	29	29	29	29	29	29	29	29	29	29	30	31	32	33;
            26	25	23	21	19	17	15	13	11	10	9	7	6	5	4	2	2	2	2	3	4	4	5	6	8	10	12	14	16	18	20	22	24	26	27	4	3	2	2	2	2	3	4	5	6	7	9	11	13	15	17	19	21	23	25	26	26	24	23	22];

Q_sc_rot_shift = [31	32	33	33	33	33	33	33	33	32	31	30	29	28	26	25	24	23	22	21	20	19	19	19	19	19	19	19	19	19	20	21	21	23	24	25	26	27	28	30	20	18	17	15	14	13	12	11	9	7	6	5	4	3	3	4	5	6	7	8;
                  19	18	16	15	13	12	11	9	8	7	5	4	3	3	3	3	3	3	5	6	7	8	10	11	12	13	14	15	16	17	18	20	21	21	21	21	21	21	21	21	21	21	21	21	21	21	21	21	21	21	21	21	21	21	22	23	24	25	26	27];

Y_different = [11	11	11	11	11	11	11	11	12	13	13	14	15	16	17	18	19	20	21	22	23	23	23	23	23	23	23	23	23	23	23	23	23	23	23	23	23	23	23	23	23	23	22	22	21	20	19	18	17	15	14	13	12	11	10	10	9	8	8	8;
                1	2	3	5	6	7	8	10	11	12	13	14	14	14	14	14	14	13	12	11	11	10	9	8	7	6	5	4	3	2	1	12	14	15	16	17	18	19	20	21	22	24	25	26	27	27	27	27	27	27	27	27	27	26	25	24	23	22	21	20];

O_tr=[21	20	19	18	17	16	15	14	13	12	11	10	10	10	10	10	10	10	10	10	10	10	10	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	28	29	30	30	30	30	30	30	30	30	30	30	30	30	29	28	27	26	25;
7	7	7	7	7	7	7	7	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	27	27	27	27	27	27	27	27	27	27	27	27	26	25	24	23	22	21	20	19	18	17	16	15	14	13	12	11	10	9	8	7];


A_rotated = [10	9	8	8	8	8	8	8	8	8	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	25	25	25	25	25	25	25	25	25	24	23	22	21	20	19	18	17	16	15	14	13	12	22	23	24	25	25	25	25	24	23	22;
             10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	26	26	26	26	26	26	26	26	25	24	23	22	21	20	19	18	17	16	15	14	13	12	11	10	10	10	10	10	10	10	10	10	10	9	8	7	6	5	4	3	2	2	2];

E_shifted = [23	24	25	26	27	28	29	30	31	32	33	34	34	34	33	32	31	30	29	28	27	26	25	24	23	22	21	20	19	18	17	17	17	17	17	17	17	17	17	17	17	17	17	18	19	20	21	22	23	24	25	26	27	28	29	30	31	32	33	34;
             16	17	17	17	17	17	17	17	16	15	14	13	12	11	10	9	8	8	8	8	8	8	8	8	8	8	8	8	9	10	11	12	13	14	15	16	17	18	19	20	21	22	23	24	25	26	27	27	27	27	27	27	27	27	27	27	27	26	25	24];
%Pass the character which similar one you want to find, any of above testing dataset        
minimization(Q_sc_rot_shift);
